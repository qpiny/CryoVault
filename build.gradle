version = '0.0.1'

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'de.obqo.gradle:gradle-lesscss-plugin:1.0-1.3.3' }
}

apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'lesscss'

mainClassName = 'org.rejna.cryo.web.CryoWebMock'
sourceSets {
	main {
		scala { srcDir 'src/test/scala' }
		resources { srcDir 'src/test/resources' }
	}
}

ext {
	majorScalaVersion = '2.10'
	scalaVersion = '2.10.3'
	akkaVersion = '2.2.3'
	sprayVersion = '1.2.0'
	inWebdevel = false
	executor = null
}

configurations {
	fmpp
	cljs
}

repositories {
	mavenCentral()
	maven { url 'http://akka.io/releases' }
	//maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
	//maven { url 'http://repo.typesafe.com/typesafe/' }
	maven { url 'http://repo.spray.io/' }
	maven { url 'http://repo.gradle.org/gradle/repo' }
	maven { url 'http://clojars.org/repo' }
	//mavenRepo (name: "AngularJS", url: "https://ajax.googleapis.com") {
	//	pattern = "ajax/libs/angularjs/[version]/[module](.[classifier]).js
	//}
}

dependencies {
	compile group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
	compile group: 'io.spray', name: 'spray-can', version: sprayVersion
	compile group: 'io.spray', name: 'spray-routing', version: sprayVersion
	
	compile group: 'com.typesafe.akka', name: 'akka-actor_' + majorScalaVersion, version: akkaVersion
	compile group: 'com.typesafe.akka', name: 'akka-slf4j_' + majorScalaVersion, version: akkaVersion
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'
	compile group: 'joda-time', name: 'joda-time', version: '2.3'
	compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.6.12'
	compile group: 'org.json4s', name: 'json4s_' + majorScalaVersion, version: '3.2.6'
	compile group: 'org.json4s', name: 'json4s-ext_' + majorScalaVersion, version: '3.2.6'
	compile group: 'org.json4s', name: 'json4s-native_' + majorScalaVersion, version: '3.2.6'
	
	// TEST //
	//compile group: 'junit', name: 'junit', version: '4.11'
	//compile group: 'org.scalatest', name: 'scalatest_' + majorScalaVersion, version: '2.0.RC1'
	//compile group: 'org.specs2', name: 'specs2_' + majorScalaVersion, version: '2.3.4'
	
	//compile group: 'io.spray', name: 'spray-testkit', version: sprayVersion
	//compile group: 'com.typesafe.akka', name: 'akka-testkit_' + majorScalaVersion, version: akkaVersion
	fmpp group: 'net.sourceforge.fmpp', name: 'fmpp', version: '0.9.14'
	cljs 'leiningen:leiningen:2.3.4'
	cljs 'org.slf4j:slf4j-simple:1.7.5'
	
	//compile group: 'junit', name: 'junit', version: '4.11'
	//compile group: 'org.scalatest', name: 'scalatest_' + majorScalaVersion, version: '2.0.RC1'
	//compile group: 'com.typesafe.akka', name: 'akka-testkit_' + majorScalaVersion, version: akkaVersion

}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.name == 'commons-logging') {
			details.useTarget 'org.slf4j:jcl-over-slf4j:1.7.5'
		}
	}
}

sourceSets {
	main {
		scala { srcDir 'build/generated-sources/main/scala' }
		resources { srcDir 'build/generated-resources' }
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.10'
}

task generateFmppSources << {
	ant.taskdef(name: 'fmpp', classname: 'fmpp.tools.AntTask', classpath: configurations.fmpp.asPath)
	ant.fmpp skipUnchanged: 'all', srcDir: 'src/main/fmpp', outputRoot: 'build/generated-sources/main/scala'
}
compileScala.dependsOn generateFmppSources

tasks.withType(ScalaCompile) {
	scalaCompileOptions.fork = false
	scalaCompileOptions.unchecked = true
	scalaCompileOptions.deprecation = true
	scalaCompileOptions.setAdditionalParameters(['-feature'])
	
	scalaCompileOptions.useCompileDaemon = false
	scalaCompileOptions.useAnt = true
	
	
	configure(scalaCompileOptions.forkOptions) {
		memoryMaximumSize = '1g'
		jvmArgs = ['-XX:MaxPermSize=512m']
	}
}

lesscss {
	source = fileTree('src/main/less') {
		include 'cryo.less'
	}
	dest = 'build/generated-resources/webapp/stylesheets'
	//dest = 'src/main/resources/webapp/stylesheets'
	compress = true
}
processResources.dependsOn 'lesscss'

class Lein extends DefaultTask {
    def List<String> largs = ['help']

    @TaskAction
    def lein() {
        project.javaexec {
            classpath = project.configurations.cljs
            main = 'clojure.main'
            args = ['-m', 'leiningen.core.main'] + largs
        }
    }
}

task lein(type: Lein)

task cljsbuild(type: Lein) {
	largs = ['cljsbuild', 'once']
}
processResources.dependsOn 'cljsbuild'
cljsbuild.onlyIf { !inWebdevel }

task cljsautobuild(type: Lein) {
	largs = ['cljsbuild', 'auto']
	//inputs.dir = file('src/main/cljs')
	//outputs.file = file("$buildDir/generated-resources/webapp/javascript/main.js")
	//ext.srcFile = file('mountains.xml')
	//ext.destDir = new File(buildDir, 'generated')
	//inputs.dir new File(buildDir, 'generated-resources/
	//outputs.dir file('webapp/javascript/main.js')
}

task webdevel << {
	project.ext.executor = java.util.concurrent.Executors.newSingleThreadScheduledExecutor()
	project.ext.executor.submit({ cljsautobuild.execute() } as java.util.concurrent.Callable)
}
webdevel.finalizedBy 'run'

gradle.buildFinished {
	if (project.ext.executor != null)
		project.ext.executor.shutdown()
}

task webdevelant {
	doLast {
		project.ext.inWebdevel = true
		ant.java(fork: true, spawn: true, classname: 'clojure.main', classpath: project.configurations.cljs.asPath) {
			arg(value: '-m')
			arg(value: 'leiningen.core.main')
			arg(value: 'cljsbuild')
			arg(value: 'auto')
		}
	}
	finalizedBy "run"
}
